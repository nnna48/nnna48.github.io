<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/18/Hello-World-0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://haojen.github.io/Claudia-theme-blog/images/tree.png"
                      alt="cover"
                ></p>
<p>第一次搭建博客，这是个测试</p>
]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/17/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu22编译Android13</title>
    <url>/2023/04/28/Ubuntu22%E7%BC%96%E8%AF%91Android13/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>1.操作系统：Ubuntu22虚拟机</p>
<p>2.下载和配置所需工具</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install curl repo git</span><br><span class="line">#下载配置repo</span><br><span class="line">mkdir ~/bin/</span><br><span class="line">curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo -o ~/bin/repo</span><br><span class="line">chmod +x ~/bin/repo</span><br><span class="line">#修改 ~/.bashrc文件，再最后一行加入</span><br><span class="line">export REPO_URL=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#x27;</span><br><span class="line">#执行</span><br><span class="line">source  ~/.bashrc</span><br><span class="line">#配置git环境，email和name配置成自己的名称</span><br><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure></div>

<h2 id="下载Android源码"><a href="#下载Android源码" class="headerlink" title="下载Android源码"></a>下载Android源码</h2><p>创建保存代码的目录，我下载分支为android-13.0.0_r35，如果想下载其他分支，请查看<a class="link"   href="https://link.zhihu.com/?target=https://source.android.google.cn/docs/setup/about/build-numbers%23source-code-tags-and-builds" >source-code-tags-and-builds <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/android-13.0.0_r35</span><br><span class="line">cd ~/android-13.0.0_r35</span><br><span class="line">repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-13.0.0_r35</span><br><span class="line">repo sync</span><br></pre></td></tr></table></figure></div>

<p>repo sync后面可以加 -j 参数，-j 后面的数字为使用cpu的线程数，根据个人电脑配置选择，后面编译也是如此。</p>
<h2 id="代码编译"><a href="#代码编译" class="headerlink" title="代码编译"></a>代码编译</h2><p>1.编译前注意事项</p>
<p>（1）内存要够大：我电脑是16GB内存，编译时提示最少需要16G的内存，我就给虚拟机分了16GB，实际最吃内存的是编译开始的阶段，顶过去就好了</p>
<p>（2）增加交换空间：</p>
<p>Ubuntu22默认交换空间只有2G，我们要扩大，我给虚拟机分了16GB，所以我把交换空间也设为16GB</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#检查原来的系统中是否有swap分区</span><br><span class="line">free -h</span><br><span class="line">#删除原来的swap分区</span><br><span class="line"> sudo swapoff /swapfile  </span><br><span class="line"> sudo rm  /swapfile</span><br><span class="line">#检查硬盘可用空间</span><br><span class="line">df -h</span><br><span class="line">#创建分区，设置swap分区与内存一样大，内存是16G，这里也创建一个16G的swap分区</span><br><span class="line">sudo fallocate -l 16G /swapfile</span><br><span class="line">#检查是否创建成功</span><br><span class="line">ls -lh /swapfile</span><br><span class="line">#使能分区</span><br><span class="line">sudo chmod 600 /swapfile</span><br><span class="line">sudo mkswap /swapfile</span><br><span class="line">sudo swapon /swapfile</span><br><span class="line">sudo swapon --show</span><br><span class="line">free -h</span><br><span class="line">#到这里，分区创建完成了，但是下次启动会丢失，接下来，固化swap分区</span><br><span class="line">sudo cp /etc/fstab /etc/fstab.bak</span><br><span class="line">echo &#x27;/swapfile none swap sw 0 0&#x27; | sudo tee -a /etc/fstab</span><br></pre></td></tr></table></figure></div>

<p>实际上我分配了20G内存后来也编译失败了，建议内存+交换空间要达到30G，而Ubuntu的交换空间只有2G</p>
<p>2.编译工具安装</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip libncurses5 openjdk-8-jdk</span><br></pre></td></tr></table></figure></div>

<p>3.编译代码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/android-13.0.0_r35</span><br><span class="line">source build/envsetup.sh</span><br><span class="line">#下面选择自己想要的版本,如果想要启动模拟器的话，要选择sdk开头的，比如aosp_car_x86_64-userdebug是无法启动模拟器的，sdk_car_x86_64-userdebug 可以启动模拟器</span><br><span class="line">lunch sdk_car_x86_64-userdebug </span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure></div>

<p>-j4编译了很久，从下午四五点开始到晚上睡觉才编译了一半多，一觉醒来是编译好了的，所以电脑配置好的 -j 后的参数可以调大一些，省时间。 </p>
<h2 id="启动模拟器"><a href="#启动模拟器" class="headerlink" title="启动模拟器"></a>启动模拟器</h2><h3 id="启动模拟器的注意事项："><a href="#启动模拟器的注意事项：" class="headerlink" title="启动模拟器的注意事项："></a>启动模拟器的注意事项：</h3><p>要通过VMware中Ubuntu22虚拟机来启动Android模拟器，需要在虚拟机设置中，勾选虚拟化Intel YT-x&#x2F;EPT或 AMD-V&#x2F;RVI</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Ubuntu22%E7%BC%96%E8%AF%91Android13/%E5%90%AF%E5%8A%A8%E6%A8%A1%E6%8B%9F%E5%99%A81.png"
                      alt="启动模拟器"
                ></p>
<p>若出现报错：</p>
<h3 id="启动虚拟器"><a href="#启动虚拟器" class="headerlink" title="启动虚拟器"></a>启动虚拟器</h3><p>编译完成后在同一窗口执行：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">emulator</span><br></pre></td></tr></table></figure></div>


<p>如果切换了终端窗口，则执行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">source build/envsetup.sh</span><br><span class="line">lunch sdk_car_x86_64-userdebug</span><br><span class="line">emulator -writable-system </span><br></pre></td></tr></table></figure></div>

<p>-writable-system表示系统可写，不加的话无法adb push文件到系统</p>
<h2 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h2><h2 id="调试工具安装"><a href="#调试工具安装" class="headerlink" title="调试工具安装"></a>调试工具安装</h2><p>安装adb调试工具</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:nilarimogard/webupd8</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install android-tools-adb</span><br></pre></td></tr></table></figure></div>

<p>安装完成后执行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure></div>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>Ubuntu22编译Android13：<a class="link"   href="https://zhuanlan.zhihu.com/p/616810759" >Ubuntu 22.04编译AOSP Android 13 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/fly263/p/16982647.html" >Ubuntu 22.04 搭建编译Android源码环境 - fly263 - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>增大交换内存：<a class="link"   href="https://blog.csdn.net/weixin_37532614/article/details/119239715" >(106条消息) Ubuntu 20.04增加SWAP分区，解决加载大型数据集的内存溢出问题_小朱 智能驾驶的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>移动终端安全</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Ubuntu22</tag>
      </tags>
  </entry>
  <entry>
    <title>密码工程第三次课后作业---ASN1</title>
    <url>/2023/04/17/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A---ASN1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​	在<a class="link"   href="https://zh.wikipedia.org/wiki/%E7%94%B5%E4%BF%A1" >电信 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和<a class="link"   href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C" >计算机网络 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>领域，<strong>ASN.1</strong>（<strong>Abstract Syntax Notation One</strong>) 是一套<a class="link"   href="https://zh.wikipedia.org/wiki/%E6%A0%87%E5%87%86" >标准 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，是描述<a class="link"   href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE" >数据 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的表示、编码、传输、解码的灵活的记法。它提供了一套正式、无歧义和精确的规则以描述独立于特定计算机硬件的对象结构。[<a class="link"   href="https://zh.wikipedia.org/zh-sg/ASN.1#cite_note-1" >1] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>ASN.1是<a class="link"   href="https://zh.wikipedia.org/wiki/ISO" >ISO <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和<a class="link"   href="https://zh.wikipedia.org/wiki/ITU-T" >ITU-T <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的联合标准，最初是1984年的<a class="link"   href="https://zh.wikipedia.org/w/index.php?title=CCITT_X.409:1984&action=edit&redlink=1" >CCITT X.409:1984 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的一部分。由于其广泛应用，1988年ASN.1移到独立标准<strong>X.208</strong>，1995年进行全面修订后变成<strong>X.680</strong>系列标准。</p>
<p>​	ASN.1本身只定义了表示信息的<a class="link"   href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%8F%A5%E6%B3%95" >抽象句法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，但是没有限定其编码的方法。各种ASN.1编码规则提供了由ASN.1描述其抽象句法的数据的值的传送语法（具体表达）。标准的ASN.1编码规则有<a class="link"   href="https://zh.wikipedia.org/w/index.php?title=BER&action=edit&redlink=1" >基本编码规则 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（BER，Basic Encoding Rules）、<a class="link"   href="https://zh.wikipedia.org/w/index.php?title=CER&action=edit&redlink=1" >规范编码规则 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（CER，Canonical Encoding Rules）、<a class="link"   href="https://zh.wikipedia.org/w/index.php?title=DER&action=edit&redlink=1" >唯一编码规则 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（DER，Distinguished Encoding Rules）、<a class="link"   href="https://zh.wikipedia.org/w/index.php?title=PER&action=edit&redlink=1" >压缩编码规则 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（PER，Packed Encoding Rules）和<a class="link"   href="https://zh.wikipedia.org/w/index.php?title=XER&action=edit&redlink=1" >XML编码规则 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（XER，<a class="link"   href="https://zh.wikipedia.org/wiki/XML" >XML <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> Encoding Rules）。为了使ASN.1能够描述一些原先没有使用ASN.1定义，因此不适用上述任一编码规则的数据传输和表示的应用和协议，另外制订了<a class="link"   href="https://zh.wikipedia.org/w/index.php?title=ECN&action=edit&redlink=1" >ECN <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>来扩展ASN.1的编码形式。ECN可以提供非常灵活的表明方法，但还没有得到普遍应用。</p>
<p>​	ASN.1与特定的ASN.1编码规则一起通过使用独立于计算机架构和编程语言的方法来描述数据结构，为结构化数据的交互提供了手段，特别是在网络环境的应用程序。</p>
<p>​	<a class="link"   href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82" >应用层 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>协议如<a class="link"   href="https://zh.wikipedia.org/w/index.php?title=X.400&action=edit&redlink=1" >X.400 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（<a class="link"   href="https://zh.wikipedia.org/wiki/Email" >email <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）、<a class="link"   href="https://zh.wikipedia.org/wiki/X.500" >X.500 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和<a class="link"   href="https://zh.wikipedia.org/wiki/LDAP" >LDAP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（<a class="link"   href="https://zh.wikipedia.org/wiki/%E7%9B%AE%E5%BD%95%E6%9C%8D%E5%8A%A1" >目录服务 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）、<a class="link"   href="https://zh.wikipedia.org/wiki/H.323" >H.323 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（<a class="link"   href="https://zh.wikipedia.org/wiki/VoIP" >VoIP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）和<a class="link"   href="https://zh.wikipedia.org/wiki/SNMP" >SNMP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>使用 ASN.1 描述它们交互的<a class="link"   href="https://zh.wikipedia.org/wiki/PDU" >协议数据单元 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。在<a class="link"   href="https://zh.wikipedia.org/wiki/UMTS" >UMTS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的接入和非接入层也有广泛的应用。 ASN.1的其他应用领域参见此处[<a class="link"   href="https://web.archive.org/web/20051023024910/http://asn1.elibel.tm.fr/en/uses/index.htm" >1] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<p>​	这里[<a class="link"   href="https://web.archive.org/web/20051023025313/http://asn1.elibel.tm.fr/links/#tools" >2] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>列举了很多ASN.1的自由或者商业的工具。</p>
<p><a class="link"   href="https://zh.wikipedia.org/zh-sg/ASN.1%22%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%22" >摘自维基百科ASN.1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="作业一："><a href="#作业一：" class="headerlink" title="作业一："></a>作业一：</h2><h3 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h3><ol>
<li>使用ASN.1编写一个数据结构。具体什么数据自己考虑。</li>
<li>分别使用asn1c、JavaAsn1Compiler等对这个数据结构进行编译。可以使用c／java／python进行编码，并存储，而后用另外一种编程语言进行解码，比如，用C编码，可以用java或者python解码；</li>
<li>对上述的数据结构，使用protobuffer实现一次。这里不强制要求不同的语言实现编码和解码。</li>
</ol>
<h3 id="环境和工具配置"><a href="#环境和工具配置" class="headerlink" title="环境和工具配置"></a>环境和工具配置</h3><h4 id="1-操作系统："><a href="#1-操作系统：" class="headerlink" title="1. 操作系统："></a>1. 操作系统：</h4><p>Windows11本机和Ubuntu22虚拟机</p>
<h4 id="2-Ubuntu配置java和javac"><a href="#2-Ubuntu配置java和javac" class="headerlink" title="2. Ubuntu配置java和javac"></a>2. Ubuntu配置java和javac</h4><p>在终端中输入java或javac命令，没有java或javac的话会提示你安装，如下图所示，根据提示的命令选择需要的版本直接安装就行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/1.png"
                      alt="java配置"
                ></p>
<h4 id="3-ubuntu安装asn1c编译器"><a href="#3-ubuntu安装asn1c编译器" class="headerlink" title="3. ubuntu安装asn1c编译器"></a>3. ubuntu安装asn1c编译器</h4><p>（1）<strong>下载asn1c的源码</strong>：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/vlm/asn1c.git</span><br></pre></td></tr></table></figure></div>

<p>或者直接下载源码包自行解压<strong><a class="link"   href="https://github.com/vlm/asn1c" >https://github.com/vlm/asn1c <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<p>注意：源码目录的路径中不要含有中文，否则在执行make和make install时会报错</p>
<p>（2）<strong>下载依赖库</strong>：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libtool automake bison flex</span><br></pre></td></tr></table></figure></div>

<p>（3）<strong>生成配置文件</strong>：进入刚刚解压的文件夹，就是那个asn1c开头的文件夹，执行 </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">test -f configure || autoreconf -iv</span><br></pre></td></tr></table></figure></div>

<p>（4）<strong>配置ASN1C config</strong>：在asn1源码文件夹目录里执行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure></div>

<p>（5）<strong>编译</strong>：执行命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo make</span><br></pre></td></tr></table></figure></div>

<p>（6）<strong>安装</strong>：执行命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure></div>

<p>（7）执行命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">asn1c -h</span><br></pre></td></tr></table></figure></div>

<p>测试是否安装成功</p>
<h4 id="4-Ubuntu或者Windows安装JavaAsn1Compiler"><a href="#4-Ubuntu或者Windows安装JavaAsn1Compiler" class="headerlink" title="4.Ubuntu或者Windows安装JavaAsn1Compiler"></a>4.Ubuntu或者Windows安装JavaAsn1Compiler</h4><p><strong>JavaAsn1Compiler下载地址</strong>: <a class="link"   href="https://sourceforge.net/projects/jac-asn1/files/latest/download" >https://sourceforge.net/projects/jac-asn1/files/latest/download <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ，直接下载解压就行， Ubuntu 和 Windows 都可以，解压后有 HOW TO RUN.txt 记录了使用方法。</p>
<h3 id="1-使用ASN-1编写一个数据结构"><a href="#1-使用ASN-1编写一个数据结构" class="headerlink" title="1.使用ASN.1编写一个数据结构"></a>1.使用ASN.1编写一个数据结构</h3><p>文件命名为rectangle.asn1</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">RectangleModule1 DEFINITIONS ::=</span><br><span class="line">BEGIN</span><br><span class="line">Rectangle ::= SEQUENCE &#123;</span><br><span class="line">    height  INTEGER,</span><br><span class="line">    width   INTEGER,</span><br><span class="line">    author  OCTET STRING,</span><br><span class="line">    title OCTET STRING</span><br><span class="line">&#125;</span><br><span class="line">END</span><br></pre></td></tr></table></figure></div>



<h3 id="2-使用asn1c进行编译"><a href="#2-使用asn1c进行编译" class="headerlink" title="2.使用asn1c进行编译"></a>2.使用asn1c进行编译</h3><p>编译后会产生很多文件，建议先建立一个文件夹，将rectangle.asn1文件复制进去，再编译。</p>
<p>编译命令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">asn1c -fnative-types rectangle.asn1</span><br></pre></td></tr></table></figure></div>

<p>输出：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-fnative-types: Deprecated option</span><br><span class="line">Compiled Rectangle.c</span><br><span class="line">Compiled Rectangle.h</span><br><span class="line">Copied /usr/local/share/asn1c/OPEN_TYPE.h	-&gt; OPEN_TYPE.h</span><br><span class="line">Copied /usr/local/share/asn1c/OPEN_TYPE.c	-&gt; OPEN_TYPE.c</span><br><span class="line">Copied /usr/local/share/asn1c/constr_CHOICE.h	-&gt; constr_CHOICE.h</span><br><span class="line">Copied /usr/local/share/asn1c/INTEGER.h	-&gt; INTEGER.h</span><br><span class="line">Copied /usr/local/share/asn1c/INTEGER.c	-&gt; INTEGER.c</span><br><span class="line">Copied /usr/local/share/asn1c/NativeInteger.h	-&gt; NativeInteger.h</span><br><span class="line">Copied /usr/local/share/asn1c/NativeInteger.c	-&gt; NativeInteger.c</span><br><span class="line">Copied /usr/local/share/asn1c/constr_CHOICE.c	-&gt; constr_CHOICE.c</span><br><span class="line">Copied /usr/local/share/asn1c/constr_SEQUENCE.h	-&gt; constr_SEQUENCE.h</span><br><span class="line">Copied /usr/local/share/asn1c/constr_SEQUENCE.c	-&gt; constr_SEQUENCE.c</span><br><span class="line">Copied /usr/local/share/asn1c/asn_application.h	-&gt; asn_application.h</span><br><span class="line">Copied /usr/local/share/asn1c/asn_application.c	-&gt; asn_application.c</span><br><span class="line">Copied /usr/local/share/asn1c/asn_ioc.h	-&gt; asn_ioc.h</span><br><span class="line">Copied /usr/local/share/asn1c/asn_system.h	-&gt; asn_system.h</span><br><span class="line">Copied /usr/local/share/asn1c/asn_codecs.h	-&gt; asn_codecs.h</span><br><span class="line">Copied /usr/local/share/asn1c/asn_internal.h	-&gt; asn_internal.h</span><br><span class="line">Copied /usr/local/share/asn1c/asn_internal.c	-&gt; asn_internal.c</span><br><span class="line">Copied /usr/local/share/asn1c/asn_random_fill.h	-&gt; asn_random_fill.h</span><br><span class="line">Copied /usr/local/share/asn1c/asn_random_fill.c	-&gt; asn_random_fill.c</span><br><span class="line">Copied /usr/local/share/asn1c/asn_bit_data.h	-&gt; asn_bit_data.h</span><br><span class="line">Copied /usr/local/share/asn1c/asn_bit_data.c	-&gt; asn_bit_data.c</span><br><span class="line">Copied /usr/local/share/asn1c/OCTET_STRING.h	-&gt; OCTET_STRING.h</span><br><span class="line">Copied /usr/local/share/asn1c/OCTET_STRING.c	-&gt; OCTET_STRING.c</span><br><span class="line">Copied /usr/local/share/asn1c/BIT_STRING.h	-&gt; BIT_STRING.h</span><br><span class="line">Copied /usr/local/share/asn1c/BIT_STRING.c	-&gt; BIT_STRING.c</span><br><span class="line">Copied /usr/local/share/asn1c/asn_codecs_prim.c	-&gt; asn_codecs_prim.c</span><br><span class="line">Copied /usr/local/share/asn1c/asn_codecs_prim.h	-&gt; asn_codecs_prim.h</span><br><span class="line">Copied /usr/local/share/asn1c/ber_tlv_length.h	-&gt; ber_tlv_length.h</span><br><span class="line">Copied /usr/local/share/asn1c/ber_tlv_length.c	-&gt; ber_tlv_length.c</span><br><span class="line">Copied /usr/local/share/asn1c/ber_tlv_tag.h	-&gt; ber_tlv_tag.h</span><br><span class="line">Copied /usr/local/share/asn1c/ber_tlv_tag.c	-&gt; ber_tlv_tag.c</span><br><span class="line">Copied /usr/local/share/asn1c/ber_decoder.h	-&gt; ber_decoder.h</span><br><span class="line">Copied /usr/local/share/asn1c/ber_decoder.c	-&gt; ber_decoder.c</span><br><span class="line">Copied /usr/local/share/asn1c/der_encoder.h	-&gt; der_encoder.h</span><br><span class="line">Copied /usr/local/share/asn1c/der_encoder.c	-&gt; der_encoder.c</span><br><span class="line">Copied /usr/local/share/asn1c/constr_TYPE.h	-&gt; constr_TYPE.h</span><br><span class="line">Copied /usr/local/share/asn1c/constr_TYPE.c	-&gt; constr_TYPE.c</span><br><span class="line">Copied /usr/local/share/asn1c/constraints.h	-&gt; constraints.h</span><br><span class="line">Copied /usr/local/share/asn1c/constraints.c	-&gt; constraints.c</span><br><span class="line">Copied /usr/local/share/asn1c/xer_support.h	-&gt; xer_support.h</span><br><span class="line">Copied /usr/local/share/asn1c/xer_support.c	-&gt; xer_support.c</span><br><span class="line">Copied /usr/local/share/asn1c/xer_decoder.h	-&gt; xer_decoder.h</span><br><span class="line">Copied /usr/local/share/asn1c/xer_decoder.c	-&gt; xer_decoder.c</span><br><span class="line">Copied /usr/local/share/asn1c/xer_encoder.h	-&gt; xer_encoder.h</span><br><span class="line">Copied /usr/local/share/asn1c/xer_encoder.c	-&gt; xer_encoder.c</span><br><span class="line">Copied /usr/local/share/asn1c/per_support.h	-&gt; per_support.h</span><br><span class="line">Copied /usr/local/share/asn1c/per_support.c	-&gt; per_support.c</span><br><span class="line">Copied /usr/local/share/asn1c/per_decoder.h	-&gt; per_decoder.h</span><br><span class="line">Copied /usr/local/share/asn1c/per_decoder.c	-&gt; per_decoder.c</span><br><span class="line">Copied /usr/local/share/asn1c/per_encoder.h	-&gt; per_encoder.h</span><br><span class="line">Copied /usr/local/share/asn1c/per_encoder.c	-&gt; per_encoder.c</span><br><span class="line">Copied /usr/local/share/asn1c/per_opentype.h	-&gt; per_opentype.h</span><br><span class="line">Copied /usr/local/share/asn1c/per_opentype.c	-&gt; per_opentype.c</span><br><span class="line">Copied /usr/local/share/asn1c/oer_decoder.h	-&gt; oer_decoder.h</span><br><span class="line">Copied /usr/local/share/asn1c/oer_encoder.h	-&gt; oer_encoder.h</span><br><span class="line">Copied /usr/local/share/asn1c/oer_support.h	-&gt; oer_support.h</span><br><span class="line">Copied /usr/local/share/asn1c/oer_decoder.c	-&gt; oer_decoder.c</span><br><span class="line">Copied /usr/local/share/asn1c/oer_encoder.c	-&gt; oer_encoder.c</span><br><span class="line">Copied /usr/local/share/asn1c/oer_support.c	-&gt; oer_support.c</span><br><span class="line">Copied /usr/local/share/asn1c/OPEN_TYPE_oer.c	-&gt; OPEN_TYPE_oer.c</span><br><span class="line">Copied /usr/local/share/asn1c/INTEGER_oer.c	-&gt; INTEGER_oer.c</span><br><span class="line">Copied /usr/local/share/asn1c/BIT_STRING_oer.c	-&gt; BIT_STRING_oer.c</span><br><span class="line">Copied /usr/local/share/asn1c/OCTET_STRING_oer.c	-&gt; OCTET_STRING_oer.c</span><br><span class="line">Copied /usr/local/share/asn1c/NativeInteger_oer.c	-&gt; NativeInteger_oer.c</span><br><span class="line">Copied /usr/local/share/asn1c/constr_CHOICE_oer.c	-&gt; constr_CHOICE_oer.c</span><br><span class="line">Copied /usr/local/share/asn1c/constr_SEQUENCE_oer.c	-&gt; constr_SEQUENCE_oer.c</span><br><span class="line">Generated Makefile.am.libasncodec</span><br><span class="line">Copied /usr/local/share/asn1c/converter-example.c	-&gt; converter-example.c implicit</span><br><span class="line">Generated pdu_collection.c</span><br><span class="line">Generated converter-example.mk</span><br><span class="line">Copied /usr/local/share/asn1c/converter-example.c	-&gt; converter-example.c implicit</span><br><span class="line">Generated pdu_collection.c</span><br><span class="line">Generated Makefile.am.asn1convert</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/2.png"
                      alt="asn1c编译输出"
                ></p>
<h3 id="3-使用JavaAsn1Compiler进行编译和编码"><a href="#3-使用JavaAsn1Compiler进行编译和编码" class="headerlink" title="3.使用JavaAsn1Compiler进行编译和编码"></a>3.使用JavaAsn1Compiler进行编译和编码</h3><h4 id="JavaAsn1Compiler编译"><a href="#JavaAsn1Compiler编译" class="headerlink" title="JavaAsn1Compiler编译"></a>JavaAsn1Compiler编译</h4><p>以Ubuntu为例，先进入 JAC.jar所在的目录，也就是JavaAsn1Compiler_3.0\lib\，再在终端中执行命令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JAC.jar  -d 编译后生成文件的地址  -p rectangle rectangle.asn1的地址 </span><br><span class="line">java -jar JAC.jar -d ~/桌面/asn/asn-java   -p rectangle ~/桌面/asn/asn-java/rectangle.asn1</span><br></pre></td></tr></table></figure></div>

<p>编译成功后会在指定的输出目录（-d后的目录）生成文件夹，里面包含一个.java文件</p>
<h4 id="进行编码"><a href="#进行编码" class="headerlink" title="进行编码"></a>进行编码</h4><h5 id="编写java文件"><a href="#编写java文件" class="headerlink" title="编写java文件"></a>编写java文件</h5><p>在编译生成的.java文件，也就是Rectangle.java文件中类里面添加以下代码，来给数据结构赋值。以下的代码要包在类里，也就是加在最后一个}的前面。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> &#123;</span><br><span class="line">  <span class="comment">// 创建输出流变量</span></span><br><span class="line">  <span class="type">ByteArrayOutputStream</span> <span class="variable">outStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">  <span class="type">BerOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BerOutputStream</span>(outStream);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对rec这个类进行赋值</span></span><br><span class="line">  <span class="comment">// 赋值结果为rec(author= b&#x27;1234&#x27;, title = b&#x27;1234&#x27;, height = 1011, width = 21)</span></span><br><span class="line">  <span class="type">Rectangle</span> <span class="variable">rec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">  <span class="type">byte</span>[] name = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>];</span><br><span class="line">  name[<span class="number">0</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">  name[<span class="number">1</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">  name[<span class="number">2</span>] = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">  name[<span class="number">3</span>] = <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line">  rec.author.setValue(name);</span><br><span class="line">  rec.title.setValue(name);</span><br><span class="line">  rec.height.setValue(<span class="number">1011</span>);</span><br><span class="line">  rec.width.setValue(<span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对输出变量进行编码</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    rec.encode(out);</span><br><span class="line">    System.out.println(out.toString());</span><br><span class="line">  &#125;<span class="keyword">catch</span> (java.io.IOException e1)&#123;</span><br><span class="line">    System.out.println(e1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将编码后的结果写入test_rec文件，此时文件是二进制数据</span></span><br><span class="line">  <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test_rec&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">outFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br><span class="line">    <span class="keyword">try</span>&#123;outFile.write(outStream.toByteArray());&#125;</span><br><span class="line">    <span class="keyword">catch</span> (java.io.IOException e2)&#123;</span><br><span class="line">      System.out.println(e2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(java.io.FileNotFoundException e1)&#123;</span><br><span class="line">    System.out.println(e1);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="编译java文件"><a href="#编译java文件" class="headerlink" title="编译java文件"></a>编译java文件</h5><p>使用javac Rectangle.java命令进行编译，发现报错：</p>
<p>报错一：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/3.png"
                      alt="报错一"
                ></p>
<p>将Rectangle.java复制到 JavaAsn1Compiler&#x2F;JavaAsn1Compiler_3.0&#x2F;Eclipse Project&#x2F;JavaAsn1Compiler&#x2F;src&#x2F; 中再进行编译，此时可能会产生以下的报错。</p>
<p>报错二</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/4.png"
                      alt="报错二"
                ></p>
<p>根据报错信息找到相应的文件，找到乱码发现不影响程序功能，直接删除就行。</p>
<p>报错三：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/5.png"
                      alt="报错三"
                ></p>
<p>缺少相关的库，在java编译asn1文件之后的文件中，也就是Rectangle.java中，加入如下内容:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.chaosinmotion.asn1.*;</span><br><span class="line">import java.io.*;</span><br></pre></td></tr></table></figure></div>

<p>报错四：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/6.png"
                      alt="报错四"
                ></p>
<p>根据报错信息，找到指定文件，在相应位置加上 @Deprecated</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/7.png"
                      alt="解决报错四"
                ></p>
<p>Rectangle.java文件最终代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rectangle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Created by JAC (Java Asn1 Compiler)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.turkcelltech.jac.*;</span><br><span class="line"><span class="keyword">import</span> com.chaosinmotion.asn1.Tag;</span><br><span class="line"><span class="keyword">import</span> com.chaosinmotion.asn1.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Sequence</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * if you want to set/fill an element below, just call the setValue(..) method over its instance.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * To encode/decode your object, just call encode(..) decode(..) methods.</span></span><br><span class="line"><span class="comment">	 * See &#x27;TestProject.java&#x27; in the project to examine encoding/decoding examples</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">ASN1Integer</span> <span class="variable">height</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ASN1Integer</span>(<span class="string">&quot;height&quot;</span>);</span><br><span class="line">	<span class="keyword">public</span> <span class="type">ASN1Integer</span> <span class="variable">width</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ASN1Integer</span>(<span class="string">&quot;width&quot;</span>);</span><br><span class="line">	<span class="keyword">public</span> <span class="type">OctetString</span> <span class="variable">author</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OctetString</span>(<span class="string">&quot;author&quot;</span>);</span><br><span class="line">	<span class="keyword">public</span> <span class="type">OctetString</span> <span class="variable">title</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OctetString</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">	<span class="comment">/* end of element declarations */</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* asn.1 SEQUENCE constructor</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">public</span></span><br><span class="line">	<span class="title function_">Rectangle</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		setUpElements();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* asn.1 SEQUENCE constructor with its name</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">public</span></span><br><span class="line">	<span class="title function_">Rectangle</span><span class="params">(String name)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">super</span>(name);</span><br><span class="line">		setUpElements();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span></span><br><span class="line">	<span class="title function_">setUpElements</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">super</span>.addElement(height);</span><br><span class="line">		<span class="built_in">super</span>.addElement(width);</span><br><span class="line">		<span class="built_in">super</span>.addElement(author);</span><br><span class="line">		<span class="built_in">super</span>.addElement(title);</span><br><span class="line">	<span class="comment">/* end of element setup */</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> &#123;</span><br><span class="line">	  <span class="comment">// 创建输出流变量</span></span><br><span class="line">	  <span class="type">ByteArrayOutputStream</span> <span class="variable">outStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">	  <span class="type">BerOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BerOutputStream</span>(outStream);</span><br><span class="line"></span><br><span class="line">	  <span class="comment">// 对rec这个类进行赋值</span></span><br><span class="line">	  <span class="comment">// 赋值结果为rec(author= b&#x27;1234&#x27;, title = b&#x27;1234&#x27;, height = 1011, width = 21)</span></span><br><span class="line">	  <span class="type">Rectangle</span> <span class="variable">rec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">	  <span class="type">byte</span>[] name = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>];</span><br><span class="line">	  name[<span class="number">0</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">	  name[<span class="number">1</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">	  name[<span class="number">2</span>] = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">	  name[<span class="number">3</span>] = <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line">	  rec.author.setValue(name);</span><br><span class="line">	  rec.title.setValue(name);</span><br><span class="line">	  rec.height.setValue(<span class="number">1011</span>);</span><br><span class="line">	  rec.width.setValue(<span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">	  <span class="comment">// 对输出变量进行编码</span></span><br><span class="line">	  <span class="keyword">try</span> &#123;</span><br><span class="line">	    rec.encode(out);</span><br><span class="line">	    System.out.println(out.toString());</span><br><span class="line">	  &#125;<span class="keyword">catch</span> (java.io.IOException e1)&#123;</span><br><span class="line">	    System.out.println(e1);</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">	  <span class="comment">// 将编码后的结果写入test_rec文件，此时文件是二进制数据</span></span><br><span class="line">	  <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test_rec&quot;</span>);</span><br><span class="line">	  <span class="keyword">try</span>&#123;</span><br><span class="line">	    <span class="type">OutputStream</span> <span class="variable">outFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br><span class="line">	    <span class="keyword">try</span>&#123;outFile.write(outStream.toByteArray());&#125;</span><br><span class="line">	    <span class="keyword">catch</span> (java.io.IOException e2)&#123;</span><br><span class="line">	      System.out.println(e2);</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;<span class="keyword">catch</span>(java.io.FileNotFoundException e1)&#123;</span><br><span class="line">	    System.out.println(e1);</span><br><span class="line">	  &#125;</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>再执行一次javac命令就会生成一个Rectangle.class文件：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/8.png"
                      alt="生成class文件"
                ></p>
<h5 id="执行Rectangle-class"><a href="#执行Rectangle-class" class="headerlink" title="执行Rectangle.class"></a>执行Rectangle.class</h5><p>执行java Rectangle命令，发现报错：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/9.png"
                      alt="class报错"
                ></p>
<p>原因是Rectangle.java文件中写了package rectangle，所以我们要在src目录下新建rectangle文件夹，将Rectangle.class文件复制进去，在src目录下打开终端执行java rectangle&#x2F;Rectangle 命令，会生成编码文件test_rec。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/10.png"
                      alt="生成编码文件"
                ></p>
<h3 id="4-使用python进行解码"><a href="#4-使用python进行解码" class="headerlink" title="4.使用python进行解码"></a>4.使用python进行解码</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyasn1.<span class="built_in">type</span> <span class="keyword">import</span> univ, namedtype</span><br><span class="line"><span class="keyword">from</span> pyasn1.codec.der.decoder <span class="keyword">import</span> decode</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;height&#x27;</span>, univ.Integer()),</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;width&#x27;</span>, univ.Integer()),</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;author&#x27;</span>, univ.OctetString()),</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;title&#x27;</span>, univ.OctetString()),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">text = <span class="built_in">open</span>(<span class="string">&#x27;C:/Users/86157/Desktop/JavaAsn1Compiler_3.0/Eclipse Project/JavaAsn1Compiler/src/test_rec&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">received_record, rest_of_substrate = decode(text, asn1Spec = Rectangle())</span><br><span class="line"><span class="keyword">for</span> field <span class="keyword">in</span> received_record:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(field,received_record[field]))</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/11.png"
                      alt="python解码"
                ></p>
<h3 id="5-protobuffer实现"><a href="#5-protobuffer实现" class="headerlink" title="5.protobuffer实现"></a>5.protobuffer实现</h3><h4 id="安装配置Protobuffer"><a href="#安装配置Protobuffer" class="headerlink" title="安装配置Protobuffer"></a>安装配置Protobuffer</h4><h5 id="源文件下载"><a href="#源文件下载" class="headerlink" title="源文件下载"></a>源文件下载</h5><p>官方的 release 包是托管在 GitHub 的：<a class="link"   href="https://github.com/protocolbuffers/protobuf/releases" >https://github.com/protocolbuffers/protobuf/releases <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>按需选择对应架构的源码包，我这里选择：<a class="link"   href="https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protobuf-all-21.12.zip" >protobuf-all-21.12.zip <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install autoconf automake libtool curl make g++ unzip -y</span><br></pre></td></tr></table></figure></div>



<h5 id="编译-x2F-安装"><a href="#编译-x2F-安装" class="headerlink" title="编译&#x2F;安装"></a>编译&#x2F;安装</h5><p>解压上述源码包，cd 到解压目录，执行：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line">#刷新动态库配置</span><br><span class="line">sudo ldconfig</span><br><span class="line">#检查版本</span><br><span class="line">protoc --version</span><br></pre></td></tr></table></figure></div>

<h4 id="编译proto"><a href="#编译proto" class="headerlink" title="编译proto"></a>编译proto</h4><p>首先根据上述数据结构编写proto文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto2&quot;;</span><br><span class="line">message Rectangle &#123;</span><br><span class="line">  required int32 height = 1;</span><br><span class="line">  required int32 width = 2;</span><br><span class="line">  optional string author = 3;</span><br><span class="line">  optional string title = 4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>生成python，java，cpp文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">protoc --proto_path= rectangle.proto --python_out ./</span><br><span class="line">protoc --proto_path= rectangle.proto --cpp_out ./</span><br><span class="line">protoc --proto_path= rectangle.proto --java_out ./</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/12.png"
                      alt="proto编译"
                ></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>asn1的安装配置与使用：</p>
<p><strong><a class="link"   href="https://blog.csdn.net/qq_28256407/article/details/120571402" >https://blog.csdn.net/qq_28256407/article/details/120571402 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<p><strong><a class="link"   href="https://blog.csdn.net/adgentleman/article/details/88576354" >https://blog.csdn.net/adgentleman/article/details/88576354 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<p><strong><a class="link"   href="https://blog.csdn.net/weixin_33849942/article/details/91736131" >https://blog.csdn.net/weixin_33849942/article/details/91736131 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<p>protobuffer的安装配置与使用：</p>
<p><strong><a class="link"   href="https://eyunzhu.com/cdata/ll3_nlQ_8KF8ML9_-9HYkw" >https://eyunzhu.com/cdata/ll3_nlQ_8KF8ML9_-9HYkw <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<p><strong><a class="link"   href="http://i.lckiss.com/?p=8088" >http://i.lckiss.com/?p=8088 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<p><strong><a class="link"   href="https://www.hi-dhl.com/2020/10/28/android/04-probuff-ubuntu/" >https://www.hi-dhl.com/2020/10/28/android/04-probuff-ubuntu/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<p>实验参考：</p>
<p><strong><a class="link"   href="https://www.jianshu.com/p/5deb48440af3" >https://www.jianshu.com/p/5deb48440af3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<p><strong><a class="link"   href="https://kindhearted57.github.io/2020/05/12/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A5-ANS1.html" >https://kindhearted57.github.io/2020/05/12/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A5-ANS1.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<h2 id="作业二"><a href="#作业二" class="headerlink" title="作业二"></a>作业二</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>搜索一个使用ASN.1编码的公私密钥或者证书文件，对其中的DER进行详细解释。可以自己分析，也可以通过工具分析（比如asn1dump）。分析的过程需要写出数据结构的组成，就是写出TLV来。</p>
<h3 id="X-509证书"><a href="#X-509证书" class="headerlink" title="X.509证书"></a>X.509证书</h3><p>​	X.509是密码学里公钥证书的格式标准。X.509证书已应用在包括TLS&#x2F;SSL在内的众多网络协议里，同时它也用在很多非在线应用场景里，比如电子签名服务。		X.509证书里含有公钥、身份信息（比如网络主机名，组织的名称或个体名称等）和签名信息（可以是证书签发机构CA的签名，也可以是自签名）。</p>
<p>​	X.509还附带了证书吊销列表和用于从最终对证书进行签名的证书签发机构直到最终可信点为止的证书合法性验证算法。X.509是ITU-T标准化部门基于他们之前的ASN.1定义的一套证书标准。</p>
<h4 id="证书示例"><a href="#证书示例" class="headerlink" title="证书示例"></a>证书示例</h4><p>我们先从网络获取一个证书实例，选取一个网站，点击网页链接的锁的标志，后续操作如下，最终我选择的是der形式存储：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/13.png"
                      alt="证书获取"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/14.png"
                      alt="证书获取"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/15.png"
                      alt="证书获取"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/16.png"
                      alt="证书获取"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/17.png"
                      alt="证书获取"
                ></p>
<h4 id="证书结构"><a href="#证书结构" class="headerlink" title="证书结构"></a>证书结构</h4><p>X.509使用ASN.1来描述公钥证书的结构，通常编码为DER格式，也可以进一步BASE64编码为可打印的PEM格式。V3版本的X.509结构如下：</p>
<ul>
<li>证书<ul>
<li>版本号</li>
<li>序列号</li>
<li>签名算法</li>
<li>颁发者</li>
<li>证书有效期<ul>
<li>此日期前无效</li>
<li>此日期后无效</li>
</ul>
</li>
<li>主题</li>
<li>主题公钥信息<ul>
<li>公钥算法</li>
<li>主题公钥</li>
</ul>
</li>
<li>颁发者唯一身份信息（可选项）</li>
<li>主题唯一身份信息（可选项）</li>
<li>扩展信息（可选项）<ul>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li>证书签名算法</li>
<li>数字签名</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Certificate  ::=  SEQUENCE  &#123;</span><br><span class="line">     tbsCertificate       TBSCertificate,</span><br><span class="line">     signatureAlgorithm   AlgorithmIdentifier,</span><br><span class="line">     signatureValue       BIT STRING  &#125;</span><br><span class="line"></span><br><span class="line"> TBSCertificate  ::=  SEQUENCE  &#123;</span><br><span class="line">     version         [0]  EXPLICIT Version DEFAULT v1,</span><br><span class="line">     serialNumber         CertificateSerialNumber,</span><br><span class="line">     signature            AlgorithmIdentifier,</span><br><span class="line">     issuer               Name,</span><br><span class="line">     validity             Validity,</span><br><span class="line">     subject              Name,</span><br><span class="line">     subjectPublicKeyInfo SubjectPublicKeyInfo,</span><br><span class="line">     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,</span><br><span class="line">                          -- If present, version MUST be v2 or v3</span><br><span class="line">     subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,</span><br><span class="line">                          -- If present, version MUST be v2 or v3</span><br><span class="line">     extensions      [3]  EXPLICIT Extensions OPTIONAL</span><br><span class="line">                          -- If present, version MUST be v3</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">Version  ::=  INTEGER  &#123;  v1(0), v2(1), v3(2)  &#125;</span><br><span class="line"></span><br><span class="line">CertificateSerialNumber  ::=  INTEGER</span><br><span class="line"></span><br><span class="line">Validity ::= SEQUENCE &#123;</span><br><span class="line">     notBefore      Time,</span><br><span class="line">     notAfter       Time &#125;</span><br><span class="line"></span><br><span class="line">Time ::= CHOICE &#123;</span><br><span class="line">     utcTime        UTCTime,</span><br><span class="line">     generalTime    GeneralizedTime &#125;</span><br><span class="line"></span><br><span class="line">UniqueIdentifier  ::=  BIT STRING</span><br><span class="line"></span><br><span class="line">SubjectPublicKeyInfo  ::=  SEQUENCE  &#123;</span><br><span class="line">     algorithm            AlgorithmIdentifier,</span><br><span class="line">     subjectPublicKey     BIT STRING  &#125;</span><br><span class="line"></span><br><span class="line">Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension</span><br><span class="line"></span><br><span class="line">Extension  ::=  SEQUENCE  &#123;</span><br><span class="line">     extnID      OBJECT IDENTIFIER,</span><br><span class="line">     critical    BOOLEAN DEFAULT FALSE,</span><br><span class="line">     extnValue   OCTET STRING  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="证书分析"><a href="#证书分析" class="headerlink" title="证书分析"></a>证书分析</h4><h5 id="查看证书内容"><a href="#查看证书内容" class="headerlink" title="查看证书内容"></a>查看证书内容</h5><p>我们先直接点击保存的证书文件，再点击详细信息，查看证书的详细内容。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/18.png"
                      alt="证书内容"
                ></p>
<h5 id="用Asn1dump分析证书文件"><a href="#用Asn1dump分析证书文件" class="headerlink" title="用Asn1dump分析证书文件"></a>用Asn1dump分析证书文件</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/19.png"
                      alt="证书分析"
                ></p>
<p>证书签名算法的OID为 1.2.840.113549.1.1.11 ，我们在<a class="link"   href="http://www.oid-info.com/" >www.oid-info.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 上查询OID，发现它是<strong>sha256WithRSAEncryption</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/20.png"
                      alt="证书分析"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Certificate  ::=  SEQUENCE  &#123;</span><br><span class="line">        tbsCertificate       TBSCertificate,           - 证书</span><br><span class="line">        signatureAlgorithm   AlgorithmIdentifier,      - 证书签名算法 1.2.840.113549.1.1.11   sha256WithRSAEncryption</span><br><span class="line">        signatureValue       BIT STRING  &#125;             - 数字签名</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/21.png"
                      alt="证书分析"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    TBSCertificate  ::=  SEQUENCE  &#123;</span><br><span class="line">        version         [0]  EXPLICIT Version DEFAULT v1,                  -版本号</span><br><span class="line">        serialNumber         CertificateSerialNumber,                      -序列号</span><br><span class="line">        signature            AlgorithmIdentifier,                          -签名算法</span><br><span class="line">        issuer               Name,                                         -颁发者</span><br><span class="line">        validity             Validity,                                     -有效期</span><br><span class="line">        subject              Name,                                         -主题</span><br><span class="line">        subjectPublicKeyInfo SubjectPublicKeyInfo,                         -主题公钥信息</span><br><span class="line">        issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,           -颁发者唯一身份信息（可选项）</span><br><span class="line">                             -- If present, version MUST be v2 or v3</span><br><span class="line">        subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,           -主题唯一身份信息（可选项）</span><br><span class="line">                             -- If present, version MUST be v2 or v3</span><br><span class="line">        extensions      [3]  EXPLICIT Extensions OPTIONAL                  - 扩展信息（可选项）</span><br><span class="line">                             -- If present, version MUST be v3</span><br><span class="line">        &#125;</span><br><span class="line">#版本号   V3</span><br><span class="line">   Version  ::=  INTEGER  &#123;  v1(0), v2(1), v3(2)  &#125;</span><br><span class="line">#序列号   044d72d77cdda702dd5a67f2a23bbdd9</span><br><span class="line">   CertificateSerialNumber  ::=  INTEGER</span><br><span class="line">#签名算法    sha256RSA  sha256</span><br><span class="line">#颁发者   CN = DigiCert TLS RSA SHA256 2020 CA1，O = DigiCert Inc，C = US</span><br><span class="line">#有效期  从2023年2月21日 8:00:00 到 2024年3月21日 7:59:59</span><br><span class="line">   Validity ::= SEQUENCE &#123;</span><br><span class="line">        notBefore      Time,</span><br><span class="line">        notAfter       Time &#125;</span><br><span class="line"></span><br><span class="line">   Time ::= CHOICE &#123;</span><br><span class="line">        utcTime        UTCTime,</span><br><span class="line">        generalTime    GeneralizedTime &#125;</span><br><span class="line">#主题使用者CN = *.github.io，O = GitHub, Inc.，L = San Francisco，S = California，C = US   </span><br><span class="line">#公钥  30 82 01 0a 02 82 01 01 00 b8 b0 60 0e 1a 2f f1 b1 86 4b 64 ec 11 9f a6 79 be e8 87 f1 88 c5 b4 49 9b 10 bb ca af ea af be 54 0c 78 43 7f ca 7b 4e 45 5b 0b 24 29 f1 bb 23 fc 19 a4 c7 6c 70 49 76 53 d3 09 23 65 b2 48 7b b6 1c aa 07 1a e2 79 1a f9 7a 5e e7 16 f8 a6 4a d5 39 a3 e2 0d f7 57 ef ed f8 08 76 5b 52 da 8b d0 e6 1e 6e 2f f9 0f 99 4b 6a 52 ca 34 e1 a4 c9 20 33 d3 97 e8 7a 77 c5 03 10 26 41 82 61 47 a2 af c4 56 3f 76 a2 38 cb b2 70 ae 72 7a 43 c1 7e 27 a3 5e d6 e3 f6 e7 a5 30 70 bd 2a 96 27 7a 7b fb 40 d2 57 77 af 23 12 27 42 3a c6 0b 6a 8c bd ba 2d ee 3f 9f 15 ee 62 57 a4 a6 95 50 af 43 b0 ac 76 b8 e1 0e d9 ff 56 ec 74 50 86 b5 1f 96 2c d1 95 05 e5 b7 05 67 93 4e 9e f2 5a 38 1f a7 8f 43 5a de 3c 57 da 48 7a 50 c6 88 38 15 c8 97 2c 2c ec f8 39 09 36 bd 19 8d 03 56 41 66 07 24 e3 02 03 01 00 01</span><br><span class="line">#公钥参数	05 00</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/22.png"
                      alt="证书分析"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/23.png"
                      alt="证书分析"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/24.png"
                      alt="证书分析"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/25.png"
                      alt="证书分析"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/26.png"
                      alt="证书分析"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/27.png"
                      alt="证书分析"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%AF%86%E7%A0%81%E5%B7%A5%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9AASN1/28.png"
                      alt="证书分析"
                >	</p>
<h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><p><a class="link"   href="https://zh.wikipedia.org/zh-sg/X.509#%E8%AF%81%E4%B9%A6%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84%22%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91" >X.509维基百科 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>[X.509证书结构](<a class="link"   href="https://www.cnblogs.com/xinzhao/p/8963724.html%22ECC%E5%85%AC%E9%92%A5%E6%A0%BC%E5%BC%8F%E8%AF%A6%E8%A7%A3" >https://www.cnblogs.com/xinzhao/p/8963724.html&quot;ECC公钥格式详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> “)</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/520700949" >https://zhuanlan.zhihu.com/p/520700949 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://wuziqingwzq.github.io/ca/2018/05/11/x509-knowledge-asn2.html" >https://wuziqingwzq.github.io/ca/2018/05/11/x509-knowledge-asn2.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_39385118/article/details/107510032" >https://blog.csdn.net/qq_39385118/article/details/107510032 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>密码工程</category>
      </categories>
      <tags>
        <tag>密码工程</tag>
        <tag>ASN1</tag>
      </tags>
  </entry>
  <entry>
    <title>栈溢出实验</title>
    <url>/2023/03/19/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>子函数在运行过程中，由于存在危险函数，在数据移动过程中，突破了函数栈空间的边界，破坏了母函数栈空间中的内容，导致程序运行状态异常</p>
<h2 id="分析环境和工具"><a href="#分析环境和工具" class="headerlink" title="分析环境和工具"></a>分析环境和工具</h2><p>Windows XP Professional、VC 6.0、IDA、OllyICE</p>
<h2 id="StackOverflow程序结构"><a href="#StackOverflow程序结构" class="headerlink" title="StackOverflow程序结构"></a>StackOverflow程序结构</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/nnna48/nnna48.github.io/blob/main/images/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AE%9E%E9%AA%8C/1.png?raw=true"
                      alt="1"
                ></p>
<h3 id="Main函数"><a href="#Main函数" class="headerlink" title="Main函数"></a>Main函数</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401090</span><br><span class="line">.text:00401090 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:00401090</span><br><span class="line">.text:00401090 ; Attributes: bp-based frame</span><br><span class="line">.text:00401090</span><br><span class="line">.text:00401090 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.text:00401090 _main           proc near               ; CODE XREF: _main_0j</span><br><span class="line">.text:00401090</span><br><span class="line">.text:00401090 var_444         = byte ptr -444h</span><br><span class="line">.text:00401090 Str1            = byte ptr -404h</span><br><span class="line">.text:00401090 var_4           = dword ptr -4</span><br><span class="line">.text:00401090 argc            = dword ptr  8</span><br><span class="line">.text:00401090 argv            = dword ptr  0Ch</span><br><span class="line">.text:00401090 envp            = dword ptr  10h</span><br><span class="line">.text:00401090</span><br><span class="line">.text:00401090                 push    ebp</span><br><span class="line">.text:00401091                 mov     ebp, esp</span><br><span class="line">.text:00401093                 sub     esp, 444h</span><br><span class="line">.text:00401099                 push    ebx</span><br><span class="line">.text:0040109A                 push    esi</span><br><span class="line">.text:0040109B                 push    edi</span><br><span class="line">.text:0040109C                 lea     edi, [ebp+var_444]</span><br><span class="line">.text:004010A2                 mov     ecx, 111h</span><br><span class="line">.text:004010A7                 mov     eax, 0CCCCCCCCh</span><br><span class="line">.text:004010AC                 rep stosd</span><br><span class="line">.text:004010AE                 mov     [ebp+var_4], 0</span><br><span class="line">.text:004010B5</span><br><span class="line">.text:004010B5 loc_4010B5:                             ; CODE XREF: _main:loc_401115j</span><br><span class="line">.text:004010B5                 mov     eax, 1</span><br><span class="line">.text:004010BA                 test    eax, eax</span><br><span class="line">.text:004010BC                 jz      short loc_401117</span><br><span class="line">.text:004010BE                 push    offset Format   ; &quot;please input password:  &quot;</span><br><span class="line">.text:004010C3                 call    _printf</span><br><span class="line">.text:004010C8                 add     esp, 4</span><br><span class="line">.text:004010CB                 lea     ecx, [ebp+Str1]</span><br><span class="line">.text:004010D1                 push    ecx</span><br><span class="line">.text:004010D2                 push    offset aS       ; &quot;%s&quot;</span><br><span class="line">.text:004010D7                 call    _scanf</span><br><span class="line">.text:004010DC                 add     esp, 8</span><br><span class="line">.text:004010DF                 lea     edx, [ebp+Str1]</span><br><span class="line">.text:004010E5                 push    edx             ; Str1</span><br><span class="line">.text:004010E6                 call    j_?verify_password@@YAHPAD@Z ; verify_password(char *)</span><br><span class="line">.text:004010EB                 add     esp, 4</span><br><span class="line">.text:004010EE                 mov     [ebp+var_4], eax</span><br><span class="line">.text:004010F1                 cmp     [ebp+var_4], 0</span><br><span class="line">.text:004010F5                 jz      short loc_401106</span><br><span class="line">.text:004010F7                 push    offset aIncorrectPassw ; &quot;incorrect password!\n\n&quot;</span><br><span class="line">.text:004010FC                 call    _printf</span><br><span class="line">.text:00401101                 add     esp, 4</span><br><span class="line">.text:00401104                 jmp     short loc_401115</span><br><span class="line">.text:00401106 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401106</span><br><span class="line">.text:00401106 loc_401106:                             ; CODE XREF: _main+65j</span><br><span class="line">.text:00401106                 push    offset aCongratulation ; &quot;congratulations! you have passed the ve&quot;...</span><br><span class="line">.text:0040110B                 call    _printf</span><br><span class="line">.text:00401110                 add     esp, 4</span><br><span class="line">.text:00401113                 jmp     short loc_401117</span><br><span class="line">.text:00401115 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401115</span><br><span class="line">.text:00401115 loc_401115:                             ; CODE XREF: _main+74j</span><br><span class="line">.text:00401115                 jmp     short loc_4010B5</span><br><span class="line">.text:00401117 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401117</span><br><span class="line">.text:00401117 loc_401117:                             ; CODE XREF: _main+2Cj</span><br><span class="line">.text:00401117                                         ; _main+83j</span><br><span class="line">.text:00401117                 push    offset Command  ; &quot;pause&quot;</span><br><span class="line">.text:0040111C                 call    _system</span><br><span class="line">.text:00401121                 add     esp, 4</span><br><span class="line">.text:00401124                 pop     edi</span><br><span class="line">.text:00401125                 pop     esi</span><br><span class="line">.text:00401126                 pop     ebx</span><br><span class="line">.text:00401127                 add     esp, 444h</span><br><span class="line">.text:0040112D                 cmp     ebp, esp</span><br><span class="line">.text:0040112F                 call    __chkesp</span><br><span class="line">.text:00401134                 mov     esp, ebp</span><br><span class="line">.text:00401136                 pop     ebp</span><br><span class="line">.text:00401137                 retn</span><br><span class="line">.text:00401137 _main           endp</span><br><span class="line">.text:00401137</span><br><span class="line">.text:00401137 ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/nnna48/nnna48.github.io/blob/main/images/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AE%9E%E9%AA%8C/2.png?raw=true"
                      alt="2"
                ></p>
<p>上图所示，为main函数创建函数栈空间。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     dword ptr [ebp-4], 0</span><br></pre></td></tr></table></figure></div>

<p>创建局部变量，并置为零</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/nnna48/nnna48.github.io/blob/main/images/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AE%9E%E9%AA%8C/3.png?raw=true"
                      alt="3"
                ></p>
<p>上图部分，开始进入循环</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     eax, 1</span><br><span class="line">test    eax, eax</span><br><span class="line">jz      short loc_401117</span><br></pre></td></tr></table></figure></div>

<p>eax为1，始终无法跳出循环，可判断是while(1)循环</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">push   00427090</span><br><span class="line">call    printf</span><br><span class="line">add     esp, 4</span><br></pre></td></tr></table></figure></div>

<p>调用printf，并输出数据段存储的数据 “please input password:  ”</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">lea     ecx, dword ptr [ebp-404]</span><br><span class="line">push    ecx</span><br><span class="line">push    offset aS       ; &quot;%s&quot;</span><br><span class="line">call    _scanf</span><br><span class="line">add     esp, 8</span><br><span class="line">lea     edx, dword ptr [ebp-404]</span><br><span class="line">push    edx</span><br><span class="line">call    00401005</span><br></pre></td></tr></table></figure></div>

<p>调用scanf，接收输入的数据，将接收的数据存入 esp+8 的位置，接着将 ebp-404 中所存数据存入 edx 中，并传给接下来调用的子函数 verify_password ，ebp-404 中存的是地址，所以传给子函数的也是地址</p>
<p>接下来就进入子函数verify_password</p>
<p>从子函数会到主函数，如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">add     esp, 4</span><br><span class="line">mov     dword ptr [ebp-4], eax</span><br><span class="line">cmp     dword ptr [ebp-4], 0</span><br><span class="line">je      short 00401106</span><br><span class="line">push    00427070                        ; /format = &quot;incorrect password!&quot;,LF,LF,&quot;&quot;</span><br><span class="line">call    printf                          ; \printf</span><br><span class="line">add     esp, 4                   </span><br><span class="line">jmp     short 00401115</span><br><span class="line">push    00427030                        ; /format = &quot;congratulations! you have passed the verification&quot;,LF,LF,&quot;&quot;</span><br><span class="line">call    printf                          ; \printf</span><br><span class="line">add     esp, 4</span><br><span class="line">jmp     short 00401117</span><br><span class="line">jmp     short 004010B5</span><br><span class="line">push    00427028                         ; /command = &quot;pause&quot;</span><br><span class="line">call    system                           ; \system</span><br><span class="line">add     esp, 4</span><br><span class="line">pop     edi</span><br><span class="line">pop     esi</span><br><span class="line">pop     ebx</span><br><span class="line">add     esp, 444</span><br><span class="line">cmp     ebp, esp</span><br><span class="line">call    _chkesp</span><br><span class="line">mov     esp, ebp</span><br><span class="line">pop     ebp</span><br><span class="line">retn</span><br></pre></td></tr></table></figure></div>

<p>esp加4</p>
<p>将从子函数返回的值——eax中存的数据，存到ebp-4中，再将ebp-4中的值与0作比较。</p>
<p>若结果等于零，跳转至00401106的位置，对应“push    00427030”，从而调用printf函数，输出”congratulations! you have passed the verification”，esp加4，接着跳转至0040117，对应“push    00427028”，接着调用system函数，执行“pause”指令，终结循环，接着销毁函数栈，退出main函数。</p>
<p>若结果不等于零，继续，调用函数printf，输出“incorrect password!”，esp加4，跳转至00401115，对应“jmp     short 004010B5”，又回到循环开始，继续循环。</p>
<h3 id="verify-password函数"><a href="#verify-password函数" class="headerlink" title="verify_password函数"></a>verify_password函数</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401020</span><br><span class="line">.text:00401020 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:00401020</span><br><span class="line">.text:00401020 ; Attributes: bp-based frame</span><br><span class="line">.text:00401020</span><br><span class="line">.text:00401020 ; int __cdecl verify_password(char *Str1)</span><br><span class="line">.text:00401020 ?verify_password@@YAHPAD@Z proc near    ; CODE XREF: verify_password(char *)j</span><br><span class="line">.text:00401020</span><br><span class="line">.text:00401020 var_4C          = byte ptr -4Ch</span><br><span class="line">.text:00401020 Dest            = byte ptr -0Ch</span><br><span class="line">.text:00401020 var_4           = dword ptr -4</span><br><span class="line">.text:00401020 Str1            = dword ptr  8</span><br><span class="line">.text:00401020</span><br><span class="line">.text:00401020                 push    ebp</span><br><span class="line">.text:00401021                 mov     ebp, esp</span><br><span class="line">.text:00401023                 sub     esp, 4Ch</span><br><span class="line">.text:00401026                 push    ebx</span><br><span class="line">.text:00401027                 push    esi</span><br><span class="line">.text:00401028                 push    edi</span><br><span class="line">.text:00401029                 lea     edi, [ebp+var_4C]</span><br><span class="line">.text:0040102C                 mov     ecx, 13h</span><br><span class="line">.text:00401031                 mov     eax, 0CCCCCCCCh</span><br><span class="line">.text:00401036                 rep stosd</span><br><span class="line">.text:00401038                 push    offset Str2     ; &quot;1234567&quot;</span><br><span class="line">.text:0040103D                 mov     eax, [ebp+Str1]</span><br><span class="line">.text:00401040                 push    eax             ; Str1</span><br><span class="line">.text:00401041                 call    _strcmp</span><br><span class="line">.text:00401046                 add     esp, 8</span><br><span class="line">.text:00401049                 mov     [ebp+var_4], eax</span><br><span class="line">.text:0040104C                 mov     ecx, [ebp+Str1]</span><br><span class="line">.text:0040104F                 push    ecx             ; Source</span><br><span class="line">.text:00401050                 lea     edx, [ebp+Dest]</span><br><span class="line">.text:00401053                 push    edx             ; Dest</span><br><span class="line">.text:00401054                 call    _strcpy</span><br><span class="line">.text:00401059                 add     esp, 8</span><br><span class="line">.text:0040105C                 mov     eax, [ebp+var_4]</span><br><span class="line">.text:0040105F                 pop     edi</span><br><span class="line">.text:00401060                 pop     esi</span><br><span class="line">.text:00401061                 pop     ebx</span><br><span class="line">.text:00401062                 add     esp, 4Ch</span><br><span class="line">.text:00401065                 cmp     ebp, esp</span><br><span class="line">.text:00401067                 call    __chkesp</span><br><span class="line">.text:0040106C                 mov     esp, ebp</span><br><span class="line">.text:0040106E                 pop     ebp</span><br><span class="line">.text:0040106F                 retn</span><br><span class="line">.text:0040106F ?verify_password@@YAHPAD@Z endp</span><br><span class="line">.text:0040106F</span><br><span class="line">.text:0040106F ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/nnna48/nnna48.github.io/blob/main/images/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AE%9E%E9%AA%8C/4.png?raw=true"
                      alt="4"
                ></p>
<p>创建子函数的函数栈空间</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">push    0042701C                         ; /s2 = &quot;1234567&quot;</span><br><span class="line">mov     eax, dword ptr [ebp+8]           ; |</span><br><span class="line">push    eax                              ; |s1</span><br><span class="line">call    strcmp                           ; \strcmp</span><br><span class="line">add     esp, 8</span><br><span class="line">mov     dword ptr [ebp-4], eax</span><br></pre></td></tr></table></figure></div>

<p>将0042701C 中存的数据压入，再将ebp+8的位置存的数据通过eax压入，再调用strcmp函数对两者进行比较，将比较结果存入eax中，由于我输入的数据是123456，在与1234567比较后，eax中所存的值为FFFFFFFF，若我输入的值为1254，则eax中所存的值为00000001,若我输入的数据为1234567，则eax中所存数据为00000000。</p>
<p>将esp加8</p>
<p>将比较结果从eax中取出，存入ebp-4的位置，也就是子函数verify_password的栈底</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     ecx, dword ptr [ebp+8]</span><br><span class="line">push    ecx                              ; /src</span><br><span class="line">lea     edx, dword ptr [ebp-C]           ; |</span><br><span class="line">push    edx                              ; |dest</span><br><span class="line">call    strcpy                           ; \strcpy</span><br><span class="line">add     esp, 8</span><br></pre></td></tr></table></figure></div>

<p>将ebp+8中存的数据存入ecx，再将ebp-C(ebp-8,C-&gt;Char)中的值存入edx，然后调用strcpy函数，将拷贝的值存入esp+8的位置</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     eax, dword ptr [ebp-4]</span><br><span class="line">pop     edi</span><br><span class="line">pop     esi</span><br><span class="line">pop     ebx</span><br><span class="line">add     esp, 4C</span><br><span class="line">cmp     ebp, esp</span><br><span class="line">call    _chkesp</span><br><span class="line">mov     esp, ebp</span><br><span class="line">pop     ebp</span><br><span class="line">retn</span><br></pre></td></tr></table></figure></div>

<p>将ebp-4中所存结果存入eax中（这是用来保存子函数需要返回给主函数的值），然后进行一系列操作销毁函数栈，并执行retn，返回到主函数</p>
<h2 id="栈溢出分析与利用"><a href="#栈溢出分析与利用" class="headerlink" title="栈溢出分析与利用"></a>栈溢出分析与利用</h2><p>该程序产生栈溢出的主要原因在于，子函数中采用了strcmp函数，在执行子函数时，会向函数栈的栈底先后存入整型变量authentication的值和char型数组buffer的值，这两个数据存放位置相邻，若通过strcpy函数存入buffer的字符串长度恰好等于buffer数组的长度，由于字符串最后一位还有截断字符，那么，阶段字符会将authentication的值覆盖，这将导致程序功能发生错误，比如原本程序输入“1234567”时才会显示成功，而现在我们只需要在保证authentication的值为00000001的情况下输入任意长度为8的一串数字就能得到显示成功的结果，效果如下图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/nnna48/nnna48.github.io/blob/main/images/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AE%9E%E9%AA%8C/5.png?raw=true"
                      alt="5"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/nnna48/nnna48.github.io/blob/main/images/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AE%9E%E9%AA%8C/6.png?raw=true"
                      alt="6"
                ></p>
<p>我们继续研究，就这个程序来说，我们有没有可能，利用栈溢出漏洞，做点其他事，比如弹出个cmd啥的，这一点由于个人能力有限，便向能力强的同学请教，得到以下利用方式：</p>
<p>其中“^\”是ctrl+\，“^Q”是ctrl+Q，最后一个符号是@</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/nnna48/nnna48.github.io/blob/main/images/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AE%9E%E9%AA%8C/7.png?raw=true"
                      alt="7"
                ></p>
<p>在OllyICE中分析过程，可以看到，在执行完strcmp函数后，子函数verify_password栈底附近的变化，如下图所示</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/nnna48/nnna48.github.io/blob/main/images/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AE%9E%E9%AA%8C/8.png?raw=true"
                      alt="8"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/nnna48/nnna48.github.io/blob/main/images/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AE%9E%E9%AA%8C/9.png?raw=true"
                      alt="9"
                ></p>
<p>可以看到，上述一串字符，覆盖至0012FB28的位置，导致该位置存的地址发生改变，改变之前，该地址指向主函数中执行完子函数后的位置，改变后的地址指向主函数中执行system的位置，也就是0040111C，从而执行了系统命令，达到弹出cmd的效果。</p>
]]></content>
      <categories>
        <category>逆向分析</category>
      </categories>
      <tags>
        <tag>栈溢出</tag>
      </tags>
  </entry>
</search>
